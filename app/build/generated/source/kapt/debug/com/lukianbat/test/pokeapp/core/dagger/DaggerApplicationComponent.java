// Generated by Dagger (https://google.github.io/dagger).
package com.lukianbat.test.pokeapp.core.dagger;

import android.app.Activity;
import android.app.Fragment;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.ContentProvider;
import android.content.Context;
import com.lukianbat.test.pokeapp.core.App;
import com.lukianbat.test.pokeapp.core.dagger.module.RetrofitModule;
import com.lukianbat.test.pokeapp.core.dagger.module.RetrofitModule_ProvideOkHttpClientFactory;
import com.lukianbat.test.pokeapp.core.dagger.module.RetrofitModule_ProvidePokemonRetrofitFactory;
import com.lukianbat.test.pokeapp.core.dagger.module.RoomModule;
import com.lukianbat.test.pokeapp.core.dagger.module.RoomModule_ProvideAppDatabaseFactory;
import com.lukianbat.test.pokeapp.core.dagger.module.feature.RedditModule_RedditActivityInjector;
import com.lukianbat.test.pokeapp.core.data.AppDatabase;
import com.lukianbat.test.pokeapp.feature.posts.data.datasource.api.PokemonListApi;
import com.lukianbat.test.pokeapp.feature.posts.data.datasource.api.PokemonListApiDataSource;
import com.lukianbat.test.pokeapp.feature.posts.data.datasource.api.dagger.ApiDataSourceModule;
import com.lukianbat.test.pokeapp.feature.posts.data.datasource.api.dagger.ApiDataSourceModule_ProvidePokemonApiFactory;
import com.lukianbat.test.pokeapp.feature.posts.data.datasource.api.dagger.ApiDataSourceModule_ProvidesDataSourceFactory;
import com.lukianbat.test.pokeapp.feature.posts.data.datasource.db.PokemonCacheDataSource;
import com.lukianbat.test.pokeapp.feature.posts.data.datasource.db.PokemonDao;
import com.lukianbat.test.pokeapp.feature.posts.data.datasource.db.dagger.CacheDataSourceModule;
import com.lukianbat.test.pokeapp.feature.posts.data.datasource.db.dagger.CacheDataSourceModule_ProvideDaoFactory;
import com.lukianbat.test.pokeapp.feature.posts.data.datasource.db.dagger.CacheDataSourceModule_ProvidesDataSourceFactory;
import com.lukianbat.test.pokeapp.feature.posts.data.repository.PokemonsRepository;
import com.lukianbat.test.pokeapp.feature.posts.data.repository.dagger.PokemonsRepositoryModule;
import com.lukianbat.test.pokeapp.feature.posts.data.repository.dagger.PokemonsRepositoryModule_ProvidePokemonConverterFactory;
import com.lukianbat.test.pokeapp.feature.posts.data.repository.dagger.PokemonsRepositoryModule_ProvidePokemonsRepositoryFactory;
import com.lukianbat.test.pokeapp.feature.posts.domain.dagger.GetPokemonsUseCaseModule;
import com.lukianbat.test.pokeapp.feature.posts.domain.dagger.GetPokemonsUseCaseModule_BindsGetPostsUseCaseFactory;
import com.lukianbat.test.pokeapp.feature.posts.domain.usecase.GetPokemonsUseCase;
import com.lukianbat.test.pokeapp.feature.posts.presentation.PokemonListActivity;
import com.lukianbat.test.pokeapp.feature.posts.presentation.PokemonListActivity_MembersInjector;
import com.lukianbat.test.pokeapp.feature.posts.presentation.PokemonListViewModel;
import com.lukianbat.test.pokeapp.feature.posts.presentation.dagger.PostsActivityModule;
import com.lukianbat.test.pokeapp.feature.posts.presentation.dagger.PostsActivityModule_ProvidePresenterFactory;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class DaggerApplicationComponent implements ApplicationComponent {
  private final RetrofitModule retrofitModule;

  private final ApiDataSourceModule apiDataSourceModule;

  private final Context context;

  private final RoomModule roomModule;

  private final CacheDataSourceModule cacheDataSourceModule;

  private final PokemonsRepositoryModule pokemonsRepositoryModule;

  private final GetPokemonsUseCaseModule getPokemonsUseCaseModule;

  private Provider<RedditModule_RedditActivityInjector.PokemonListActivitySubcomponent.Factory>
      pokemonListActivitySubcomponentFactoryProvider;

  private DaggerApplicationComponent(
      RetrofitModule retrofitModuleParam,
      RoomModule roomModuleParam,
      GetPokemonsUseCaseModule getPokemonsUseCaseModuleParam,
      PokemonsRepositoryModule pokemonsRepositoryModuleParam,
      ApiDataSourceModule apiDataSourceModuleParam,
      CacheDataSourceModule cacheDataSourceModuleParam,
      App seedInstance,
      Context contextParam) {
    this.retrofitModule = retrofitModuleParam;
    this.apiDataSourceModule = apiDataSourceModuleParam;
    this.context = contextParam;
    this.roomModule = roomModuleParam;
    this.cacheDataSourceModule = cacheDataSourceModuleParam;
    this.pokemonsRepositoryModule = pokemonsRepositoryModuleParam;
    this.getPokemonsUseCaseModule = getPokemonsUseCaseModuleParam;
    initialize(
        retrofitModuleParam,
        roomModuleParam,
        getPokemonsUseCaseModuleParam,
        pokemonsRepositoryModuleParam,
        apiDataSourceModuleParam,
        cacheDataSourceModuleParam,
        seedInstance,
        contextParam);
  }

  public static ApplicationComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>>
      getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf() {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(
        PokemonListActivity.class, (Provider) pokemonListActivitySubcomponentFactoryProvider);
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newInstance(
        getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<BroadcastReceiver>
      getDispatchingAndroidInjectorOfBroadcastReceiver() {
    return DispatchingAndroidInjector_Factory.newInstance(
        getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
    return DispatchingAndroidInjector_Factory.newInstance(
        getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<Service> getDispatchingAndroidInjectorOfService() {
    return DispatchingAndroidInjector_Factory.newInstance(
        getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<ContentProvider>
      getDispatchingAndroidInjectorOfContentProvider() {
    return DispatchingAndroidInjector_Factory.newInstance(
        getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private Retrofit getRetrofit() {
    return RetrofitModule_ProvidePokemonRetrofitFactory.providePokemonRetrofit(
        retrofitModule,
        RetrofitModule_ProvideOkHttpClientFactory.provideOkHttpClient(retrofitModule));
  }

  private PokemonListApi getPokemonListApi() {
    return ApiDataSourceModule_ProvidePokemonApiFactory.providePokemonApi(
        apiDataSourceModule, getRetrofit());
  }

  private PokemonListApiDataSource getPokemonListApiDataSource() {
    return ApiDataSourceModule_ProvidesDataSourceFactory.providesDataSource(
        apiDataSourceModule, getPokemonListApi());
  }

  private AppDatabase getAppDatabase() {
    return RoomModule_ProvideAppDatabaseFactory.provideAppDatabase(roomModule, context);
  }

  private PokemonDao getPokemonDao() {
    return CacheDataSourceModule_ProvideDaoFactory.provideDao(
        cacheDataSourceModule, getAppDatabase());
  }

  private PokemonCacheDataSource getPokemonCacheDataSource() {
    return CacheDataSourceModule_ProvidesDataSourceFactory.providesDataSource(
        cacheDataSourceModule, getPokemonDao());
  }

  private PokemonsRepository getPokemonsRepository() {
    return PokemonsRepositoryModule_ProvidePokemonsRepositoryFactory.providePokemonsRepository(
        pokemonsRepositoryModule,
        getPokemonListApiDataSource(),
        getPokemonCacheDataSource(),
        PokemonsRepositoryModule_ProvidePokemonConverterFactory.providePokemonConverter(
            pokemonsRepositoryModule));
  }

  private GetPokemonsUseCase getGetPokemonsUseCase() {
    return GetPokemonsUseCaseModule_BindsGetPostsUseCaseFactory.bindsGetPostsUseCase(
        getPokemonsUseCaseModule, getPokemonsRepository());
  }

  @SuppressWarnings("unchecked")
  private void initialize(
      final RetrofitModule retrofitModuleParam,
      final RoomModule roomModuleParam,
      final GetPokemonsUseCaseModule getPokemonsUseCaseModuleParam,
      final PokemonsRepositoryModule pokemonsRepositoryModuleParam,
      final ApiDataSourceModule apiDataSourceModuleParam,
      final CacheDataSourceModule cacheDataSourceModuleParam,
      final App seedInstance,
      final Context contextParam) {
    this.pokemonListActivitySubcomponentFactoryProvider =
        new Provider<
            RedditModule_RedditActivityInjector.PokemonListActivitySubcomponent.Factory>() {
          @Override
          public RedditModule_RedditActivityInjector.PokemonListActivitySubcomponent.Factory get() {
            return new PokemonListActivitySubcomponentFactory();
          }
        };
  }

  @Override
  public void inject(App arg0) {
    injectApp(arg0);
  }

  private App injectApp(App instance) {
    DaggerApplication_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    DaggerApplication_MembersInjector.injectBroadcastReceiverInjector(
        instance, getDispatchingAndroidInjectorOfBroadcastReceiver());
    DaggerApplication_MembersInjector.injectFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    DaggerApplication_MembersInjector.injectServiceInjector(
        instance, getDispatchingAndroidInjectorOfService());
    DaggerApplication_MembersInjector.injectContentProviderInjector(
        instance, getDispatchingAndroidInjectorOfContentProvider());
    DaggerApplication_MembersInjector.injectSetInjected(instance);
    return instance;
  }

  private static final class Builder extends ApplicationComponent.Builder {
    private App seedInstance;

    private Context context;

    @Override
    public void seedInstance(App arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public Builder context(Context context) {
      this.context = Preconditions.checkNotNull(context);
      return this;
    }

    @Override
    public ApplicationComponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, App.class);
      Preconditions.checkBuilderRequirement(context, Context.class);
      return new DaggerApplicationComponent(
          new RetrofitModule(),
          new RoomModule(),
          new GetPokemonsUseCaseModule(),
          new PokemonsRepositoryModule(),
          new ApiDataSourceModule(),
          new CacheDataSourceModule(),
          seedInstance,
          context);
    }
  }

  private final class PokemonListActivitySubcomponentFactory
      implements RedditModule_RedditActivityInjector.PokemonListActivitySubcomponent.Factory {
    @Override
    public RedditModule_RedditActivityInjector.PokemonListActivitySubcomponent create(
        PokemonListActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new PokemonListActivitySubcomponentImpl(new PostsActivityModule(), arg0);
    }
  }

  private final class PokemonListActivitySubcomponentImpl
      implements RedditModule_RedditActivityInjector.PokemonListActivitySubcomponent {
    private final PokemonListActivity arg0;

    private final PostsActivityModule postsActivityModule;

    private PokemonListActivitySubcomponentImpl(
        PostsActivityModule postsActivityModuleParam, PokemonListActivity arg0Param) {
      this.arg0 = arg0Param;
      this.postsActivityModule = postsActivityModuleParam;
    }

    private DispatchingAndroidInjector<androidx.fragment.app.Fragment>
        getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newInstance(
          DaggerApplicationComponent.this.getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    private PokemonListViewModel getPokemonListViewModel() {
      return PostsActivityModule_ProvidePresenterFactory.providePresenter(
          postsActivityModule, arg0, DaggerApplicationComponent.this.getGetPokemonsUseCase());
    }

    @Override
    public void inject(PokemonListActivity arg0) {
      injectPokemonListActivity(arg0);
    }

    private PokemonListActivity injectPokemonListActivity(PokemonListActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfFragment());
      PokemonListActivity_MembersInjector.injectViewModel(instance, getPokemonListViewModel());
      return instance;
    }
  }
}
